{
  "models": {
    "MegasignEvent": {
      "id": "Event",
      "properties": {
        "date": {
          "format": "date",
          "description": "The date of the audit event. Format would be yyyy-MM-dd'T'HH:mm:ssZ. For example, e.g 2016-02-25T18:46:19Z represents UTC time",
          "type": "string",
          "required": true
        },
        "initiatingUserName": {
          "description": "Full name of the user that initiated the event on behalf of the acting user when the account is shared. Will be empty if there is no account sharing in effect",
          "type": "string",
          "required": true
        },
        "description": {
          "description": "A description of the audit event",
          "type": "string",
          "required": true
        },
        "actingUserName": {
          "description": "The name of the acting user",
          "type": "string",
          "required": true
        },
        "actingUserIpAddress": {
          "description": "The IP address of the user that created the event",
          "type": "string",
          "required": true
        },
        "participantEmail": {
          "description": "Email address of the user that is the participant for the event. This may be different than the acting user for certain event types. For example, for a DELEGATION event, this is the user who was delegated to",
          "type": "string",
          "required": true
        },
        "type": {
          "description": "Type of MegaSign event",
          "type": "string",
          "required": true,
          "enum": [
            "AUTO_CANCELLED_CONVERSION_PROBLEM",
            "CREATED",
            "EXPIRED",
            "EMAIL_BOUNCED",
            "RECALLED",
            "SHARED",
            "VAULTED"
          ]
        },
        "participantRole": {
          "description": "Role assumed by all participants in the participant set the participant belongs to (signer, approver etc.).",
          "type": "string",
          "required": true,
          "enum": [
            "SIGNER",
            "DELEGATE_TO_SIGNER",
            "APPROVER",
            "DELEGATE_TO_APPROVER",
            "ACCEPTOR",
            "DELEGATE_TO_ACCEPTOR",
            "FORM_FILLER",
            "DELEGATE_TO_FORM_FILLER",
            "CERTIFIED_RECIPIENT",
            "DELEGATE_TO_CERTIFIED_RECIPIENT",
            "SHARE",
            "SENDER"
          ]
        },
        "vaultEventId": {
          "description": "The identifier assigned by the vault provider for the vault event (if vaulted, otherwise null)",
          "type": "string",
          "required": true
        },
        "participantId": {
          "description": "The unique identifier of the participant for the event. This may be different than the acting user for certain event types. For example, for a DELEGATION event, this is the user who was delegated to",
          "type": "string",
          "required": true
        },
        "versionId": {
          "description": "An ID which uniquely identifies the version of the document associated with this audit event",
          "type": "string",
          "required": true
        },
        "actingUserEmail": {
          "description": "Email address of the user that created the event",
          "type": "string",
          "required": true
        },
        "devicePhoneNumber": {
          "description": "Phone number from the device used when the participation is completed on a mobile phone",
          "type": "string",
          "required": true
        },
        "initiatingUserEmail": {
          "description": "Email address of the user that initiated the event on behalf of the acting user when the account is shared. Will be empty if there is no account sharing in effect",
          "type": "string",
          "required": true
        },
        "digitalSignatureInfo": {
          "description": "This is present for ESIGNED events when the participation is signed digitally",
          "type": "DigitalSignatureInfo",
          "items": {
            "$ref": "DigitalSignatureInfo"
          },
          "required": true
        },
        "vaultProviderName": {
          "description": "Name of the vault provider for the vault event (if vaulted, otherwise null)",
          "type": "string",
          "required": true
        },
        "comment": {
          "description": "The event comment. For RECALLED or REJECTED, the reason given by the user that initiates the event. For DELEGATE or SHARE, the message from the acting user to the participant",
          "type": "string",
          "required": false
        },
        "synchronizationId": {
          "description": "A unique identifier linking offline events to synchronization events (specified for offline signing events and synchronization events, else null)",
          "type": "string",
          "required": true
        },
        "deviceLocation": {
          "description": "Location of the device that generated the event (This value may be null due to limited privileges)",
          "type": "DeviceLocation",
          "items": {
            "$ref": "DeviceLocation"
          },
          "required": true
        }
      }
    },
    "MegaSignChildAgreement": {
      "id": "MegaSignChildAgreement",
      "properties": {
        "displayDate": {
          "format": "date",
          "description": "The display date for the agreement. Format would be yyyy-MM-dd'T'HH:mm:ssZ. For example, e.g 2016-02-25T18:46:19Z represents UTC time",
          "type": "string",
          "required": true
        },
        "esign": {
          "description": "True if this is an e-sign document",
          "type": "boolean",
          "required": true
        },
        "name": {
          "description": "Name of the Agreement",
          "type": "string",
          "required": true
        },
        "id": {
          "description": "The unique identifier of the agreement.If provided in POST, it will simply be ignored",
          "type": "string",
          "required": false
        },
        "status": {
          "description": "This is a server generated attribute which provides the detailed status of an agreement with respect to the apiCaller",
          "type": "string",
          "required": false,
          "enum": [
            "WAITING_FOR_MY_SIGNATURE",
            "WAITING_FOR_MY_APPROVAL",
            "WAITING_FOR_MY_DELEGATION",
            "WAITING_FOR_MY_ACKNOWLEDGEMENT",
            "WAITING_FOR_MY_ACCEPTANCE",
            "WAITING_FOR_MY_FORM_FILLING",
            "OUT_FOR_SIGNATURE",
            "OUT_FOR_APPROVAL",
            "OUT_FOR_DELIVERY",
            "OUT_FOR_ACCEPTANCE",
            "OUT_FOR_FORM_FILLING",
            "SIGNED",
            "APPROVED",
            "FORM_FILLED",
            "DELIVERED",
            "ACCEPTED",
            "ARCHIVED",
            "CANCELLED",
            "EXPIRED",
            "WAITING_FOR_AUTHORING",
            "WAITING_FOR_PREFILL",
            "DRAFT",
            "DOCUMENTS_NOT_YET_PROCESSED",
            "WAITING_FOR_MY_VERIFICATION",
            "WAITING_FOR_VERIFICATION"
          ]
        }
      }
    },
    "MegasignEventList": {
      "id": "EventList",
      "properties": {
        "events": {
          "description": "An array of event objects.",
          "type": "array",
          "items": {
            "$ref": "MegasignEvent"
          },
          "required": true
        }
      }
    },
    "MegaSignViewResponse": {
      "id": "MegaSignViewResponse",
      "properties": {
        "megaSignViewList": {
          "description": "List of mega sign views",
          "type": "array",
          "items": {
            "$ref": "MegaSignView"
          },
          "required": true
        }
      }
    },
    "MegaSignStateInfo": {
      "id": "MegaSignStateInfo",
      "properties": {
        "state": {
          "description": "The state to which the megaSign is to be updated. The only valid state for this variable is currently, CANCELLED",
          "type": "string",
          "required": true,
          "enum": [
            "CANCELLED"
          ]
        },
        "megaSignCancellationInfo": {
          "description": "Cancellation information for the agreement. Mandatory while cancelling a megaSign",
          "type": "AgreementCancellationInfo",
          "items": {
            "$ref": "AgreementCancellationInfo"
          },
          "required": true
        }
      }
    },
    "MegaSignViewInfo": {
      "id": "MegaSignViewInfo",
      "properties": {
        "commonViewConfiguration": {
          "description": "Common view configuration for all the available views",
          "type": "CommonViewConfiguration",
          "items": {
            "$ref": "CommonViewConfiguration"
          },
          "required": false
        },
        "name": {
          "description": "Name of the requested mega sign view",
          "showInSampleRequest": true,
          "type": "string",
          "required": true,
          "enum": [
            "AUTHORING",
            "DOCUMENT",
            "MANAGE",
            "POST_CREATE",
            "PREFILL",
            "ALL"
          ]
        }
      }
    },
    "DeviceLocation": {
      "id": "DeviceLocation",
      "properties": {
        "latitude": {
          "description": "Latitude coordinate",
          "type": "float",
          "required": true
        },
        "longitude": {
          "description": "Longitude coordinate",
          "type": "float",
          "required": true
        }
      }
    },
    "MegaSignChildAgreementsFileInfo": {
      "id": "MegaSignChildAgreementsFileInfo",
      "properties": {
        "transientDocumentId": {
          "description": "Transient id of the input file which contains participantSetsInfos. Currently only csv format is suppported. More details about CSV format <a href='https://www.adobe.com/go/documentcloud_megasigncsv'>here</a>  ",
          "type": "string",
          "required": true
        },
        "fileType": {
          "description": "Input type through which participantSetsInfos will be provided. Whichever input type is provided, the values should be provided in its corresponding value object. Currently we are supporting CSV file format for providing megaSIgn child recipients.",
          "type": "string",
          "required": true,
          "enum": [
            "CSV"
          ]
        },
        "childAgreementsInfoFileId": {
          "description": "id of the file containg information about the existing childAgreementsInfo associated with the megaSign. Will be ignored in POST call and in case of GET call, this is the only thing that will be returned. The content of the file can be fetched through GET /megaSigns/{megaSignId}/childAgreementsInfo/{childAgreementsInfoFileId} endpoint.",
          "type": "string",
          "required": false
        }
      }
    },
    "FileInfo": {
      "id": "FileInfo",
      "properties": {
        "transientDocumentId": {
          "description": "ID for a transient document that will be added to the agreement",
          "showInSampleRequest": true,
          "type": "string",
          "required": false
        },
        "libraryDocumentId": {
          "description": "ID for an existing Library document that will be added to the agreement",
          "type": "string",
          "required": false
        },
        "label": {
          "description": "The unique label value of a file info element. In case of custom workflow this will map a file to corresponding file element in workflow definition. This must be specified in case of custom workflow agreement creation request ",
          "type": "string",
          "required": false
        },
        "urlFileInfo": {
          "description": "URL for an external document to add to the agreement",
          "type": "URLFileInfo",
          "items": {
            "$ref": "URLFileInfo"
          },
          "required": false
        }
      }
    },
    "PostSignOption": {
      "id": "PostSignOption",
      "properties": {
        "redirectUrl": {
          "description": "A publicly accessible url to which the user will be sent after successfully completing the signing process",
          "type": "string",
          "required": false
        },
        "redirectDelay": {
          "description": "The delay (in seconds) before the user is taken to the success page. If this value is greater than 0, the user will first see the standard Adobe Sign success message, and then after a delay will be redirected to your success page",
          "type": "integer",
          "required": false
        }
      }
    },
    "VaultingInfo": {
      "id": "VaultingInfo",
      "properties": {
        "enabled": {
          "description": "For accounts set up for document vaulting and the option to enable per agreement, this determines whether the document is to be vaulted",
          "type": "boolean",
          "required": false
        }
      }
    },
    "MegaSignCcInfo": {
      "id": "MegaSignCcInfo",
      "properties": {
        "email": {
          "description": "Email of the CC participant of the megaSign.",
          "type": "string",
          "required": false
        }
      }
    },
    "ExternalId": {
      "id": "ExternalId",
      "properties": {
        "id": {
          "description": "An arbitrary value from your system, which can be specified at sending time and then later returned or queried",
          "type": "string",
          "required": false
        }
      }
    },
    "AgreementCancellationInfo": {
      "id": "AgreementCancellationInfo",
      "properties": {
        "comment": {
          "description": "An optional comment describing to the recipients why you want to cancel the transaction",
          "type": "string",
          "required": false
        },
        "notifyOthers": {
          "description": "Whether or not you would like the recipients to be notified that the transaction has been cancelled. The default value is false",
          "type": "boolean",
          "required": true
        }
      }
    },
    "MegaSignCreationInfo": {
      "id": "MegaSignInfo",
      "properties": {
        "firstReminderDelay": {
          "description": "Integer which specifies the delay in hours before sending the first reminder.<br>This is an optional field. The minimum value allowed is 1 hour and the maximum value can’t be more than the difference of agreement creation and expiry time of the agreement in hours.<br>If this is not specified but the reminder frequency is specified, then the first reminder will be sent based on frequency.<br>i.e. if the reminder is created with frequency specified as daily, the firstReminderDelay will be 24 hours. Cannot be updated in a PUT",
          "type": "integer",
          "required": false
        },
        "childAgreementsInfo": {
          "description": "Info corresponding to each child agreement of the megaSign ",
          "type": "ChildAgreementsInfo",
          "items": {
            "$ref": "ChildAgreementsInfo"
          },
          "required": true
        },
        "signatureType": {
          "description": "Specifies the type of signature you would like to request - written or e-signature. The possible values are <br> ESIGN : Agreement needs to be signed electronically <br>,\nWRITTEN : Agreement will be signed using handwritten signature and signed document will be uploaded into the system",
          "type": "string",
          "required": true,
          "enum": [
            "ESIGN",
            "WRITTEN"
          ]
        },
        "externalId": {
          "description": "An arbitrary value from your system, which can be specified at sending time and then later returned or queried",
          "type": "ExternalId",
          "items": {
            "$ref": "ExternalId"
          },
          "required": false
        },
        "locale": {
          "description": "The locale associated with this agreement - specifies the language for the signing page and emails, for example en_US or fr_FR. If none specified, defaults to the language configured for the agreement sender",
          "type": "string",
          "required": false
        },
        "message": {
          "description": "An optional message to the participants, describing what is being sent or why their signature is required",
          "type": "string",
          "required": false
        },
        "vaultingInfo": {
          "description": "Vaulting properties that allows Adobe Sign to securely store documents with a vault provider",
          "type": "VaultingInfo",
          "items": {
            "$ref": "VaultingInfo"
          },
          "required": false
        },
        "securityOption": {
          "description": "Optional security parameters for the megasign",
          "type": "MegaSignSecurityOption",
          "items": {
            "$ref": "MegaSignSecurityOption"
          },
          "required": false
        },
        "postSignOption": {
          "description": "URL and associated properties for the success page the user will be taken to after completing the signing process",
          "type": "PostSignOption",
          "items": {
            "$ref": "PostSignOption"
          },
          "required": false
        },
        "reminderFrequency": {
          "description": "Optional parameter that sets how often you want to send reminders to the participants. If it is not specified, the default frequency set for the account will be used",
          "type": "string",
          "required": false,
          "enum": [
            "DAILY_UNTIL_SIGNED",
            "WEEKDAILY_UNTIL_SIGNED",
            "EVERY_OTHER_DAY_UNTIL_SIGNED",
            "EVERY_THIRD_DAY_UNTIL_SIGNED",
            "EVERY_FIFTH_DAY_UNTIL_SIGNED",
            "WEEKLY_UNTIL_SIGNED"
          ]
        },
        "ccs": {
          "description": "A list of one or more CCs that will be copied in the megasign transaction. The CCs will each receive an email at the beginning of the transaction and also when the final document is signed. The email addresses will also receive a copy of the document, attached as a PDF file ",
          "type": "array",
          "items": {
            "$ref": "MegaSignCcInfo"
          },
          "required": false
        },
        "createdDate": {
          "format": "date",
          "description": "Date when megasign was created. Format would be yyyy-MM-dd'T'HH:mm:ssZ. For example, e.g 2016-02-25T18:46:19Z represents UTC time",
          "type": "string",
          "required": false
        },
        "expirationTime": {
          "format": "date",
          "description": "Time after which Agreement expires and needs to be signed before it. Format should be yyyy-MM-dd'T'HH:mm:ssZ. For example, e.g 2016-02-25T18:46:19Z represents UTC time. Should not be provided in offline agreement creation.",
          "type": "string",
          "required": false
        },
        "senderEmail": {
          "description": "Email of agreement sender. Only provided in GET. Can not be provided in POST/PUT request. If provided in POST/PUT, it will be ignored",
          "type": "string",
          "required": false
        },
        "name": {
          "description": "The name of the agreement that will be used to identify it, in emails, website and other places",
          "type": "string",
          "required": true
        },
        "fileInfos": {
          "description": "A list of one or more files (or references to files) that will be sent out for signature. If more than one file is provided, they will be combined into one PDF before being sent out. Note: Only one of the four parameters in every FileInfo object must be specified",
          "type": "array",
          "items": {
            "$ref": "FileInfo"
          },
          "required": true
        },
        "id": {
          "description": "The unique identifier of megasign ",
          "type": "string",
          "required": false
        },
        "state": {
          "description": "State of the Megasign",
          "type": "string",
          "required": true,
          "enum": [
            "IN_PROCESS"
          ]
        },
        "status": {
          "description": "Status of the Megasign",
          "type": "string",
          "required": false,
          "enum": [
            "AUTHORING",
            "IN_PROCESS",
            "CANCELLED",
            "COMPLETED",
            "EXPIRED",
            "PREFILL"
          ]
        }
      }
    },
    "DigitalSignatureInfo": {
      "id": "DigitalSignatureInfo",
      "properties": {
        "name": {
          "description": "Name captured during digital signing",
          "type": "string",
          "required": true
        },
        "company": {
          "description": "Company name captured during digital signing",
          "type": "string",
          "required": true
        },
        "email": {
          "description": "Email captured during digital signing",
          "type": "string",
          "required": true
        }
      }
    },
    "MegaSigns": {
      "id": "MegaSigns",
      "properties": {
        "megaSignList": {
          "description": "An array of MegaSign parent agreements",
          "type": "array",
          "items": {
            "$ref": "MegaSign"
          },
          "required": true
        },
        "page": {
          "description": "Pagination information for navigating through the response",
          "type": "PageInfo",
          "items": {
            "$ref": "PageInfo"
          },
          "required": true
        }
      }
    },
    "PageInfo": {
      "id": "PageInfo",
      "properties": {
        "nextCursor": {
          "description": "Used to navigate to the next page. If not returned, there are no further pages.",
          "type": "string",
          "required": true
        }
      }
    },
    "MegaSignCreationResponse": {
      "description": "A JSON  that contains the id of the newly created Mega Sign",
      "id": "MegaSignCreationResponse",
      "properties": {
        "id": {
          "description": "Unique identifier of the MegaSign parent agreement",
          "type": "string",
          "required": true
        }
      }
    },
    "MegaSignSecurityOption": {
      "id": "MegaSignSecurityOption",
      "properties": {
        "externalAuthenticationMethod": {
          "description": "The authentication method for the participants to have access to view and sign the document.",
          "type": "string",
          "required": true,
          "enum": [
            "NONE",
            "WEB_IDENTITY",
            "KBA",
            "PASSWORD"
          ]
        },
        "internalAuthenticationMethod": {
          "description": "The authentication method for the participants to have access to view and sign the document.",
          "type": "string",
          "required": true,
          "enum": [
            "NONE",
            "WEB_IDENTITY",
            "KBA",
            "PASSWORD"
          ]
        },
        "externalPassword": {
          "description": "The secondary password that will be used to protect signing the document for internal signers. Note that Adobe Sign will never show this password to anyone, so you will need to separately communicate it to any relevant parties. This password is applied only if password protection is specified for internal signers or all signers",
          "type": "string",
          "required": false
        },
        "internalPassword": {
          "description": "The secondary password that will be used to protect signing the document for external signers. Note that Adobe Sign will never show this password to anyone, so you will need to separately communicate it to any relevant parties. This password is applied only if password protection is specified for external signers or all signers",
          "type": "string",
          "required": false
        },
        "openPassword": {
          "description": "The secondary password that will be used to secure the PDF document. Note that AdobeSign will never show this password to anyone, so you will need to separately communicate it to any relevant parties",
          "type": "string",
          "required": false
        }
      }
    },
    "MegaSignChildAgreements": {
      "id": "MegaSignChildAgreements",
      "properties": {
        "page": {
          "description": "Pagination information for navigating through the response",
          "type": "PageInfo",
          "items": {
            "$ref": "PageInfo"
          },
          "required": true
        },
        "megaSignChildAgreementList": {
          "description": "A array of MegaSign child agreements",
          "type": "array",
          "items": {
            "$ref": "MegaSignChildAgreement"
          },
          "required": true
        }
      }
    },
    "CommonViewConfiguration": {
      "id": "CommonViewConfiguration",
      "properties": {
        "autoLoginUser": {
          "description": "Auto LogIn Flag. If true, the URL returned will automatically log the user in. If false, the URL returned will require the credentials. By default its value is false",
          "type": "boolean",
          "required": false
        },
        "noChrome": {
          "description": "No Chrome Flag. If true, the embedded page is shown without a navigation header or footer. If false, the standard page header and footer will be present. By default its value is false",
          "type": "boolean",
          "required": false
        },
        "locale": {
          "description": "Message template locale",
          "type": "string",
          "required": false
        }
      }
    },
    "MegaSignView": {
      "id": "MegaSignView",
      "properties": {
        "isCurrent": {
          "description": "True if this view is the current view",
          "type": "boolean",
          "required": true
        },
        "embeddedCode": {
          "description": "Embedded code of url of resource ",
          "type": "string",
          "required": false
        },
        "expiration": {
          "format": "date",
          "description": "Expiration of user url ",
          "type": "string",
          "required": false
        },
        "url": {
          "description": "Url of resource location",
          "type": "string",
          "required": false
        }
      }
    },
    "ChildAgreementsInfo": {
      "id": "ChildAgreementsInfo",
      "properties": {
        "fileInfo": {
          "description": "File info containing per child agreement information of megaSign.",
          "type": "MegaSignChildAgreementsFileInfo",
          "items": {
            "$ref": "MegaSignChildAgreementsFileInfo"
          },
          "required": true
        }
      }
    },
    "URLFileInfo": {
      "id": "URLFileInfo",
      "properties": {
        "name": {
          "description": "The original system file name of the document being sent",
          "type": "string",
          "required": true
        },
        "mimeType": {
          "description": "The mime type of the referenced file, used to determine if the file can be accepted and the necessary conversion steps can be performed",
          "type": "string",
          "required": true
        },
        "url": {
          "description": "A publicly accessible URL for retrieving the raw file content",
          "type": "string",
          "required": true
        }
      }
    },
    "MegaSign": {
      "id": "MegaSign",
      "properties": {
        "displayDate": {
          "format": "date",
          "description": "The display date for the MegaSign parent agreement. Format would be yyyy-MM-dd'T'HH:mm:ssZ. For example, e.g 2016-02-25T18:46:19Z represents UTC time",
          "type": "string",
          "required": true
        },
        "esign": {
          "description": "True, if the signature type of the MegaSign parent agreement is ESIGN. False, if the signature type of the MegaSign parent agreement is WRITTEN",
          "type": "boolean",
          "required": true
        },
        "name": {
          "description": "Name of the MegaSign parent agreement",
          "type": "string",
          "required": true
        },
        "id": {
          "description": "The unique identifier of the MegaSign parent agreement",
          "type": "string",
          "required": true
        },
        "status": {
          "description": "Current status of the MegaSign parent agreement from the perspective of the user",
          "type": "string",
          "required": true,
          "enum": [
            "WAITING_FOR_MY_SIGNATURE",
            "IN_PROCESS",
            "CANCELLED",
            "ARCHIVED",
            "COMPLETED",
            "WAITING_FOR_AUTHORING",
            "WAITING_FOR_PREFILL"
          ]
        }
      }
    }
  },
  "apiVersion": "6.0.0",
  "swaggerVersion": "1.2",
  "basePath": "https://secure.na1.echosign.com/api/rest/v6",
  "apis": [
    {
      "path": "/megaSigns",
      "operations": [
        {
          "summary": "Send an agreement out for signature to multiple recipients. Each recipient will receive and sign their own copy of the agreement.",
          "notes": "This is a primary endpoint which is used to create a new megaSign. A megaSign can be created using transientDocument, libraryDocument or a URL. You can create a megaSign in <b>IN_PROCESS</b> - Create a megaSign in this state to immediately send it. You can use the PUT/megaSigns/{megaSignId}/state endpoint to transition the state of megaSign. An allowed transition would follow the following sequence: IN_PROCESS -> CANCELLED.",
          "nickname": "createMegaSign",
          "produces": [
            "application/json"
          ],
          "authorizations": {
            "oauth2": [
              {
                "scope": "agreement_write"
              }
            ]
          },
          "errorResponses": [
            {
              "reason": "AUTH_METHOD_PROVIDED_MORE_THAN_ONCE: Auth method has been provided more than once.",
              "code": "400"
            },
            {
              "reason": "BAD_REQUEST: The request provided is invalid.",
              "code": "400"
            },
            {
              "reason": "EMPTY_REDIRECT_URL: If PostSignOptions are specified, the redirectUrl must not be empty.",
              "code": "400"
            },
            {
              "reason": "EXTERNAL_AUTH_METHOD_PROVIDED_MORE_THAN_ONCE: External auth method has been provided more than once.",
              "code": "400"
            },
            {
              "reason": "INTERNAL_AUTH_METHOD_PROVIDED_MORE_THAN_ONCE: Internal auth method has been provided more than once.",
              "code": "400"
            },
            {
              "reason": "INVALID_ARGUMENTS: One or more arguments to the method are invalid.",
              "code": "400"
            },
            {
              "reason": "INVALID_EMAIL: Email provided is invalid.",
              "code": "400"
            },
            {
              "reason": "INVALID_FILE_INFO: Invalid or no file info is provided.",
              "code": "400"
            },
            {
              "reason": "INVALID_JSON: An invalid JSON was specified.",
              "code": "400"
            },
            {
              "reason": "INVALID_REDIRECT_DELAY: The redirectDelay specified in PostSignOptions must be nonnegative integer.",
              "code": "400"
            },
            {
              "reason": "INVALID_REDIRECT_URL: The redirectUrl specified in PostSignOptions is not a valid URL.",
              "code": "400"
            },
            {
              "reason": "MISC_ERROR: Some miscellaneous error has occurred.",
              "code": "400"
            },
            {
              "reason": "MISSING_REQUIRED_PARAM: Required parameters are missing.",
              "code": "400"
            },
            {
              "reason": "RECIPIENT_SET_NOT_SUPPORTED: Recipient set with multiple recipients is not supported for a Mega Sign.",
              "code": "400"
            },
            {
              "reason": "INVALID_ACCESS_TOKEN: Access token provided is invalid or has expired.",
              "code": "401"
            },
            {
              "reason": "NOT_AUTHORIZED_FOR_TRANSIENT_RESOURCE: Not authorized for the transient resource referred in the request.",
              "code": "401"
            },
            {
              "reason": "NO_ACCESS_TOKEN_HEADER: Access token header not provided.",
              "code": "401"
            },
            {
              "reason": "UNAUTHORIZED: You cannot work on behalf of this user.",
              "code": "401"
            },
            {
              "reason": "UNVERIFIED_USER: The user has registered but has not verified their email address. The user must use the Adobe Sign web site to complete verification.",
              "code": "401"
            },
            {
              "reason": "API_TERMS_NOT_ACCEPTED: Your account is locked because an administrator has not agreed to Adobe Sign's Terms of Use. Please contact your account administrator to activate your account.",
              "code": "403"
            },
            {
              "reason": "AUTH_METHOD_PROVIDED_IS_NOT_ALLOWED: Auth method provided is not allowed.",
              "code": "403"
            },
            {
              "reason": "EXTERNAL_AUTH_METHOD_PROVIDED_IS_NOT_ALLOWED: External auth method provided is not allowed.",
              "code": "403"
            },
            {
              "reason": "INTERNAL_AUTH_METHOD_PROVIDED_IS_NOT_ALLOWED: Internal auth method provided is not allowed.",
              "code": "403"
            },
            {
              "reason": "INTERNAL_SIGNER_AUTH_NOT_ALLOWED: User settings do not permit internal signer auth.",
              "code": "403"
            },
            {
              "reason": "KBA_LIMIT_EXCEEDED: KBA limit for identity verification is exhausted. Please select another method or contact your administrator.",
              "code": "403"
            },
            {
              "reason": "PERMISSION_DENIED: The API caller does not have the permission to execute this operation.",
              "code": "403"
            },
            {
              "reason": "SEND_LIMIT_EXCEEDED: Agreement creation quota of the user is exhausted.",
              "code": "403"
            },
            {
              "reason": "SIGNER_AUTH_NOT_ALLOWED: User settings do not permit signer auth specification.",
              "code": "403"
            },
            {
              "reason": "INVALID_LIBRARYDOCUMENT_ID: The Library Document ID specified is invalid.",
              "code": "404"
            },
            {
              "reason": "INVALID_TRANSIENTDOCUMENT_ID: The Transient Document ID specified is invalid.",
              "code": "404"
            },
            {
              "reason": "LIBRARYDOCUMENT_REMOVED: The library document has been removed from the system.",
              "code": "404"
            },
            {
              "reason": "TRANSIENT_RESOURCE_DELETED: Transient Resource deleted from the server.",
              "code": "404"
            }
          ],
          "httpMethod": "POST",
          "type": "MegaSignCreationResponse",
          "parameters": [
            {
              "paramType": "header",
              "name": "Authorization",
              "description": "An <a href=\"#\" onclick=\"this.href=oauthDoc()\" oncontextmenu=\"this.href=oauthDoc()\" target=\"oauthDoc\">OAuth Access Token</a> with scopes:<ul><li style='list-style-type: square'><a href=\"#\" onclick=\"this.href=oauthDoc('agreement_write')\" oncontextmenu=\"this.href=oauthDoc('agreement_write')\" target=\"oauthDoc\">agreement_write</a></li></ul>in the format <b>'Bearer {accessToken}'.",
              "type": "string",
              "required": true
            },
            {
              "paramType": "header",
              "name": "x-api-user",
              "description": "The userId or email of API caller using the account or group token in the format <b>userid:{userId} OR email:{email}.</b> If it is not specified, then the caller is inferred from the token.",
              "type": "string",
              "required": false
            },
            {
              "paramType": "header",
              "name": "x-on-behalf-of-user",
              "description": "The userId or email in the format <b>userid:{userId} OR email:{email}.</b> of the user that has shared his/her account",
              "type": "string",
              "required": false
            },
            {
              "paramType": "body",
              "name": "MegaSignInfo",
              "description": "Information about the MegaSign that you want to send.",
              "type": "MegaSignCreationInfo",
              "required": true
            }
          ],
          "order": 180
        }
      ]
    },
    {
      "path": "/megaSigns/{megaSignId}/views",
      "operations": [
        {
          "summary": "Retrieves the requested views of mega sign agreement.",
          "notes": null,
          "nickname": "getMegaSignView",
          "produces": [
            "application/json"
          ],
          "authorizations": {
            "oauth2": [
              {
                "scope": "agreement_read",
                "description": "agreement read is always required"
              },
              {
                "scope": "user_login",
                "description": "Required additionally if the autoLoginUser parameter is set to true"
              }
            ]
          },
          "errorResponses": [
            {
              "reason": "INVALID_ARGUMENTS: One or more arguments to the method are invalid.",
              "code": "400"
            },
            {
              "reason": "INVALID_X_API_USER_HEADER: Value provided in x-api-user header is in invalid format.",
              "code": "400"
            },
            {
              "reason": "INVALID_ACCESS_TOKEN: Access token provided is invalid or has expired.",
              "code": "401"
            },
            {
              "reason": "INVALID_ON_BEHALF_OF_USER: Invalid user ID or email provided in x-on-behalf-of-user header.",
              "code": "401"
            },
            {
              "reason": "INVALID_USER: Invalid user ID or email provided in x-user header.",
              "code": "401"
            },
            {
              "reason": "NO_AUTHORIZATION_HEADER: Authorization header not provided.",
              "code": "401"
            },
            {
              "reason": "API_TERMS_NOT_ACCEPTED: Your account is locked because an administrator has not agreed to Adobe Sign's Terms of Use. Please contact your account administrator to activate your account.",
              "code": "403"
            },
            {
              "reason": "PERMISSION_DENIED: The API caller does not have the permission to execute this operation.",
              "code": "403"
            },
            {
              "reason": "INVALID_MEGASIGN_ID: The Mega Sign ID specified is invalid.",
              "code": "404"
            },
            {
              "reason": "MEGASIGN_DELETED: The Mega Sign has been deleted.",
              "code": "404"
            },
            {
              "reason": "MISC_SERVER_ERROR: Some miscellaneous error has occurred.",
              "code": "500"
            }
          ],
          "httpMethod": "POST",
          "type": "MegaSignViewResponse",
          "parameters": [
            {
              "paramType": "header",
              "name": "Authorization",
              "description": "An <a href=\"#\" onclick=\"this.href=oauthDoc()\" oncontextmenu=\"this.href=oauthDoc()\" target=\"oauthDoc\">OAuth Access Token</a> with scopes:<ul><li style='list-style-type: square'><a href=\"#\" onclick=\"this.href=oauthDoc('agreement_read')\" oncontextmenu=\"this.href=oauthDoc('agreement_read')\" target=\"oauthDoc\">agreement_read</a> - agreement read is always required</li><li style='list-style-type: square'><a href=\"#\" onclick=\"this.href=oauthDoc('user_login')\" oncontextmenu=\"this.href=oauthDoc('user_login')\" target=\"oauthDoc\">user_login</a> - Required additionally if the autoLoginUser parameter is set to true</li></ul>in the format <b>'Bearer {accessToken}'.",
              "type": "string",
              "required": true
            },
            {
              "paramType": "header",
              "name": "x-api-user",
              "description": "The userId or email of API caller using the account or group token in the format <b>userid:{userId} OR email:{email}.</b> If it is not specified, then the caller is inferred from the token.",
              "type": "string",
              "required": false
            },
            {
              "paramType": "header",
              "name": "x-on-behalf-of-user",
              "description": "The userId or email in the format <b>userid:{userId} OR email:{email}.</b> of the user that has shared his/her account",
              "type": "string",
              "required": false
            },
            {
              "paramType": "path",
              "name": "megaSignId",
              "description": "The identifier of the MegaSign parent agreement, as returned by the megaSign creation API or retrieved from the API to fetch megaSign agreements",
              "type": "string",
              "required": true
            },
            {
              "paramType": "body",
              "name": "MegaSignViewInfo",
              "description": "Name of the required view and its desired configuration.",
              "type": "MegaSignViewInfo",
              "required": true
            }
          ],
          "order": 181
        }
      ]
    },
    {
      "path": "/megaSigns",
      "operations": [
        {
          "summary": "Retrieves MegaSign parent agreements for a user.",
          "notes": null,
          "nickname": "getMegaSigns",
          "produces": [
            "application/json"
          ],
          "authorizations": {
            "oauth2": [
              {
                "scope": "agreement_read"
              }
            ]
          },
          "errorResponses": [
            {
              "reason": "INVALID_CURSOR: Page cursor provided is invalid.",
              "code": "400"
            },
            {
              "reason": "INVALID_ON_BEHALF_OF_USER_HEADER: Value provided in x-on-behalf-Of-user header is in invalid format.",
              "code": "400"
            },
            {
              "reason": "INVALID_PAGE_SIZE: Page size is either invalid or not within permissible range.",
              "code": "400"
            },
            {
              "reason": "INVALID_X_API_USER_HEADER: Value provided in x-api-user header is in invalid format.",
              "code": "400"
            },
            {
              "reason": "INVALID_ACCESS_TOKEN: Access token provided is invalid or has expired.",
              "code": "401"
            },
            {
              "reason": "INVALID_ON_BEHALF_OF_USER: Invalid user ID or email provided in x-on-behalf-of-user header.",
              "code": "401"
            },
            {
              "reason": "INVALID_USER: Invalid user ID or email provided in x-user header.",
              "code": "401"
            },
            {
              "reason": "NO_AUTHORIZATION_HEADER: Authorization header not provided.",
              "code": "401"
            },
            {
              "reason": "API_TERMS_NOT_ACCEPTED: Your account is locked because an administrator has not agreed to Adobe Sign's Terms of Use. Please contact your account administrator to activate your account.",
              "code": "403"
            },
            {
              "reason": "PERMISSION_DENIED: The API caller does not have the permission to execute this operation.",
              "code": "403"
            },
            {
              "reason": "MISC_SERVER_ERROR: Some miscellaneous error has occurred.",
              "code": "500"
            }
          ],
          "httpMethod": "GET",
          "type": "MegaSigns",
          "parameters": [
            {
              "paramType": "header",
              "name": "Authorization",
              "description": "An <a href=\"#\" onclick=\"this.href=oauthDoc()\" oncontextmenu=\"this.href=oauthDoc()\" target=\"oauthDoc\">OAuth Access Token</a> with scopes:<ul><li style='list-style-type: square'><a href=\"#\" onclick=\"this.href=oauthDoc('agreement_read')\" oncontextmenu=\"this.href=oauthDoc('agreement_read')\" target=\"oauthDoc\">agreement_read</a></li></ul>in the format <b>'Bearer {accessToken}'.",
              "type": "string",
              "required": true
            },
            {
              "paramType": "header",
              "name": "x-api-user",
              "description": "The userId or email of API caller using the account or group token in the format <b>userid:{userId} OR email:{email}.</b> If it is not specified, then the caller is inferred from the token.",
              "type": "string",
              "required": false
            },
            {
              "paramType": "header",
              "name": "x-on-behalf-of-user",
              "description": "The userId or email in the format <b>userid:{userId} OR email:{email}.</b> of the user that has shared his/her account",
              "type": "string",
              "required": false
            },
            {
              "paramType": "query",
              "name": "cursor",
              "description": "Used to navigate through the pages. If not provided, returns the first page.",
              "type": "string",
              "required": false
            },
            {
              "paramType": "query",
              "name": "pageSize",
              "description": "Number of intended items in the response page. If not provided, it is decided by the application settings.",
              "type": "integer",
              "required": false
            }
          ],
          "order": 183
        }
      ]
    },
    {
      "path": "/megaSigns/{megaSignId}",
      "operations": [
        {
          "summary": "Get detailed information of the specified MegaSign parent agreement.",
          "notes": null,
          "nickname": "getMegaSignInfo",
          "produces": [
            "application/json"
          ],
          "authorizations": {
            "oauth2": [
              {
                "scope": "agreement_read"
              }
            ]
          },
          "errorResponses": [
            {
              "reason": "INVALID_ACCESS_TOKEN: Access token provided is invalid or has expired.",
              "code": "401"
            },
            {
              "reason": "NO_AUTHORIZATION_HEADER: Authorization header not provided.",
              "code": "401"
            },
            {
              "reason": "API_TERMS_NOT_ACCEPTED: Your account is locked because an administrator has not agreed to Adobe Sign's Terms of Use. Please contact your account administrator to activate your account.",
              "code": "403"
            },
            {
              "reason": "PERMISSION_DENIED: The API caller does not have the permission to execute this operation.",
              "code": "403"
            },
            {
              "reason": "INVALID_MEGASIGN_ID: The Mega Sign ID specified is invalid.",
              "code": "404"
            },
            {
              "reason": "MISC_SERVER_ERROR: Some miscellaneous error has occurred.",
              "code": "500"
            }
          ],
          "httpMethod": "GET",
          "type": "MegaSignCreationInfo",
          "parameters": [
            {
              "paramType": "header",
              "name": "Authorization",
              "description": "An <a href=\"#\" onclick=\"this.href=oauthDoc()\" oncontextmenu=\"this.href=oauthDoc()\" target=\"oauthDoc\">OAuth Access Token</a> with scopes:<ul><li style='list-style-type: square'><a href=\"#\" onclick=\"this.href=oauthDoc('agreement_read')\" oncontextmenu=\"this.href=oauthDoc('agreement_read')\" target=\"oauthDoc\">agreement_read</a></li></ul>in the format <b>'Bearer {accessToken}'.",
              "type": "string",
              "required": true
            },
            {
              "paramType": "header",
              "name": "x-api-user",
              "description": "The userId or email of API caller using the account or group token in the format <b>userid:{userId} OR email:{email}.</b> If it is not specified, then the caller is inferred from the token.",
              "type": "string",
              "required": false
            },
            {
              "paramType": "header",
              "name": "x-on-behalf-of-user",
              "description": "The userId or email in the format <b>userid:{userId} OR email:{email}.</b> of the user that has shared his/her account",
              "type": "string",
              "required": false
            },
            {
              "paramType": "header",
              "name": "If-None-Match",
              "description": "Pass the value of the e-tag header obtained from the previous response to the same request to get a RESOURCE_NOT_MODIFIED(304) if the resource hasn't changed.",
              "type": "string",
              "required": false
            },
            {
              "paramType": "path",
              "name": "megaSignId",
              "description": "The identifier of the MegaSign parent agreement, as returned by the megaSign creation API or retrieved from the API to fetch megaSign agreements",
              "type": "string",
              "required": true
            }
          ],
          "order": 184
        }
      ]
    },
    {
      "path": "/megaSigns/{megaSignId}/agreements",
      "operations": [
        {
          "summary": "Get all the child agreements of the specified MegaSign parent agreement.",
          "notes": null,
          "nickname": "getMegaSignChildAgreements",
          "produces": [
            "application/json"
          ],
          "authorizations": {
            "oauth2": [
              {
                "scope": "agreement_read"
              }
            ]
          },
          "errorResponses": [
            {
              "reason": "INVALID_CURSOR: Page cursor provided is invalid.",
              "code": "400"
            },
            {
              "reason": "INVALID_PAGE_SIZE: Page size is either invalid or not within permissible range.",
              "code": "400"
            },
            {
              "reason": "MEGA_SIGN_EXPIRED: The specified Mega Sign has expired.",
              "code": "400"
            },
            {
              "reason": "INVALID_ACCESS_TOKEN: Access token provided is invalid or has expired.",
              "code": "401"
            },
            {
              "reason": "INVALID_ON_BEHALF_OF_USER: Invalid user ID or email provided in x-on-behalf-of-user header.",
              "code": "401"
            },
            {
              "reason": "INVALID_USER: Invalid user ID or email provided in x-user header.",
              "code": "401"
            },
            {
              "reason": "NO_AUTHORIZATION_HEADER: Authorization header not provided.",
              "code": "401"
            },
            {
              "reason": "API_TERMS_NOT_ACCEPTED: Your account is locked because an administrator has not agreed to Adobe Sign's Terms of Use. Please contact your account administrator to activate your account.",
              "code": "403"
            },
            {
              "reason": "PERMISSION_DENIED: The API caller does not have the permission to execute this operation.",
              "code": "403"
            },
            {
              "reason": "INVALID_MEGASIGN_ID: The Mega Sign ID specified is invalid.",
              "code": "404"
            },
            {
              "reason": "MEGASIGN_DELETED: The Mega Sign has been deleted.",
              "code": "404"
            },
            {
              "reason": "MISC_SERVER_ERROR: Some miscellaneous error has occurred.",
              "code": "500"
            }
          ],
          "httpMethod": "GET",
          "type": "MegaSignChildAgreements",
          "parameters": [
            {
              "paramType": "header",
              "name": "Authorization",
              "description": "An <a href=\"#\" onclick=\"this.href=oauthDoc()\" oncontextmenu=\"this.href=oauthDoc()\" target=\"oauthDoc\">OAuth Access Token</a> with scopes:<ul><li style='list-style-type: square'><a href=\"#\" onclick=\"this.href=oauthDoc('agreement_read')\" oncontextmenu=\"this.href=oauthDoc('agreement_read')\" target=\"oauthDoc\">agreement_read</a></li></ul>in the format <b>'Bearer {accessToken}'.",
              "type": "string",
              "required": true
            },
            {
              "paramType": "header",
              "name": "x-api-user",
              "description": "The userId or email of API caller using the account or group token in the format <b>userid:{userId} OR email:{email}.</b> If it is not specified, then the caller is inferred from the token.",
              "type": "string",
              "required": false
            },
            {
              "paramType": "header",
              "name": "x-on-behalf-of-user",
              "description": "The userId or email in the format <b>userid:{userId} OR email:{email}.</b> of the user that has shared his/her account",
              "type": "string",
              "required": false
            },
            {
              "paramType": "path",
              "name": "megaSignId",
              "description": "The identifier of the MegaSign parent agreement, as returned by the megaSign creation API or retrieved from the API to fetch megaSign agreements",
              "type": "string",
              "required": true
            },
            {
              "paramType": "query",
              "name": "cursor",
              "description": "Used to navigate through the pages. If not provided, returns the first page.",
              "type": "string",
              "required": false
            },
            {
              "paramType": "query",
              "name": "pageSize",
              "description": "Number of intended items in the response page. If not provided, it is decided by the application settings.",
              "type": "integer",
              "required": false
            }
          ],
          "order": 185
        }
      ]
    },
    {
      "path": "/megaSigns/{megaSignId}/childAgreementsInfo/{childAgreementsInfoFileId}",
      "operations": [
        {
          "summary": "Retrieves the file stream of the original childAgreementsInfoFile that was uploaded by sender while creating the MegaSign.",
          "notes": "CSV file stream containing form data information",
          "format": "byte",
          "nickname": "getChildAgreementsInfoFile",
          "produces": [
            "text/csv"
          ],
          "authorizations": {
            "oauth2": [
              {
                "scope": "agreement_read"
              }
            ]
          },
          "errorResponses": [
            {
              "reason": "INVALID_ACCESS_TOKEN: Access token provided is invalid or has expired.",
              "code": "401"
            },
            {
              "reason": "INVALID_ON_BEHALF_OF_USER: Invalid user ID or email provided in x-on-behalf-of-user header.",
              "code": "401"
            },
            {
              "reason": "NO_AUTHORIZATION_HEADER: Authorization header not provided.",
              "code": "401"
            },
            {
              "reason": "PERMISSION_DENIED: The API caller does not have the permission to execute this operation.",
              "code": "403"
            },
            {
              "reason": "INVALID_MEGASIGN_ID: The Mega Sign ID specified is invalid.",
              "code": "404"
            }
          ],
          "httpMethod": "GET",
          "type": "string",
          "parameters": [
            {
              "paramType": "header",
              "name": "Authorization",
              "description": "An <a href=\"#\" onclick=\"this.href=oauthDoc()\" oncontextmenu=\"this.href=oauthDoc()\" target=\"oauthDoc\">OAuth Access Token</a> with scopes:<ul><li style='list-style-type: square'><a href=\"#\" onclick=\"this.href=oauthDoc('agreement_read')\" oncontextmenu=\"this.href=oauthDoc('agreement_read')\" target=\"oauthDoc\">agreement_read</a></li></ul>in the format <b>'Bearer {accessToken}'.",
              "type": "string",
              "required": true
            },
            {
              "paramType": "header",
              "name": "x-api-user",
              "description": "The userId or email of API caller using the account or group token in the format <b>userid:{userId} OR email:{email}.</b> If it is not specified, then the caller is inferred from the token.",
              "type": "string",
              "required": false
            },
            {
              "paramType": "header",
              "name": "x-on-behalf-of-user",
              "description": "The userId or email in the format <b>userid:{userId} OR email:{email}.</b> of the user that has shared his/her account",
              "type": "string",
              "required": false
            },
            {
              "paramType": "header",
              "name": "If-None-Match",
              "description": "Pass the value of the e-tag header obtained from the previous response to the same request to get a RESOURCE_NOT_MODIFIED(304) if the resource hasn't changed.",
              "type": "string",
              "required": false
            },
            {
              "paramType": "path",
              "name": "megaSignId",
              "description": "The identifier of the MegaSign parent agreement, as returned by the megaSign creation API or retrieved from the API to fetch megaSign agreements",
              "type": "string",
              "required": true
            },
            {
              "paramType": "path",
              "name": "childAgreementsInfoFileId",
              "description": "The identifier of the childAgreementsInfoFile that has been uploaded by sender while creating the megaSign or retrieved from the API to fetch megaSignInfo ",
              "type": "string",
              "required": true
            }
          ],
          "order": 186
        }
      ]
    },
    {
      "path": "/megaSigns/{megaSignId}/combinedDocument",
      "operations": [
        {
          "summary": "Retrieves a single combined PDF document for the documents associated with the MegaSign parent agreement.",
          "notes": null,
          "format": "byte",
          "nickname": "getMegaSignCombinedDocument",
          "produces": [
            "application/pdf",
            "application/pdf;encoding=base64"
          ],
          "authorizations": {
            "oauth2": [
              {
                "scope": "agreement_read"
              }
            ]
          },
          "errorResponses": [
            {
              "reason": "INVALID_X_API_USER_HEADER: Value provided in x-api-user header is in invalid format.",
              "code": "400"
            },
            {
              "reason": "INVALID_ACCESS_TOKEN: Access token provided is invalid or has expired.",
              "code": "401"
            },
            {
              "reason": "INVALID_ON_BEHALF_OF_USER: Invalid user ID or email provided in x-on-behalf-of-user header.",
              "code": "401"
            },
            {
              "reason": "INVALID_USER: Invalid user ID or email provided in x-user header.",
              "code": "401"
            },
            {
              "reason": "NO_AUTHORIZATION_HEADER: Authorization header not provided.",
              "code": "401"
            },
            {
              "reason": "API_TERMS_NOT_ACCEPTED: Your account is locked because an administrator has not agreed to Adobe Sign's Terms of Use. Please contact your account administrator to activate your account.",
              "code": "403"
            },
            {
              "reason": "PERMISSION_DENIED: The API caller does not have the permission to execute this operation.",
              "code": "403"
            },
            {
              "reason": "DOCUMENT_NOT_AVAILABLE: The document is not yet available or will have no pages to view.",
              "code": "404"
            },
            {
              "reason": "INVALID_MEGASIGN_ID: The Mega Sign ID specified is invalid.",
              "code": "404"
            }
          ],
          "httpMethod": "GET",
          "type": "string",
          "parameters": [
            {
              "paramType": "header",
              "name": "Authorization",
              "description": "An <a href=\"#\" onclick=\"this.href=oauthDoc()\" oncontextmenu=\"this.href=oauthDoc()\" target=\"oauthDoc\">OAuth Access Token</a> with scopes:<ul><li style='list-style-type: square'><a href=\"#\" onclick=\"this.href=oauthDoc('agreement_read')\" oncontextmenu=\"this.href=oauthDoc('agreement_read')\" target=\"oauthDoc\">agreement_read</a></li></ul>in the format <b>'Bearer {accessToken}'.",
              "type": "string",
              "required": true
            },
            {
              "paramType": "header",
              "name": "x-api-user",
              "description": "The userId or email of API caller using the account or group token in the format <b>userid:{userId} OR email:{email}.</b> If it is not specified, then the caller is inferred from the token.",
              "type": "string",
              "required": false
            },
            {
              "paramType": "header",
              "name": "x-on-behalf-of-user",
              "description": "The userId or email in the format <b>userid:{userId} OR email:{email}.</b> of the user that has shared his/her account",
              "type": "string",
              "required": false
            },
            {
              "paramType": "header",
              "name": "If-None-Match",
              "description": "Pass the value of the e-tag header obtained from the previous response to the same request to get a RESOURCE_NOT_MODIFIED(304) if the resource hasn't changed.",
              "type": "string",
              "required": false
            },
            {
              "paramType": "path",
              "name": "megaSignId",
              "description": "The identifier of the MegaSign parent agreement, as returned by the megaSign creation API or retrieved from the API to fetch megaSign agreements",
              "type": "string",
              "required": true
            },
            {
              "paramType": "query",
              "name": "attachAuditReport",
              "description": "When set to true attach an audit report to the MegaSign document PDF. Default value will be false.",
              "type": "boolean",
              "required": false
            }
          ],
          "order": 187
        }
      ]
    },
    {
      "path": "/megaSigns/{megaSignId}/events",
      "operations": [
        {
          "summary": "Retrieves the events information for the MegaSign parent agreement.",
          "notes": null,
          "nickname": "getMegaSignEvents",
          "produces": [
            "application/json"
          ],
          "authorizations": {
            "oauth2": [
              {
                "scope": "agreement_read"
              }
            ]
          },
          "errorResponses": [
            {
              "reason": "INVALID_ACCESS_TOKEN: Access token provided is invalid or has expired.",
              "code": "401"
            },
            {
              "reason": "NO_AUTHORIZATION_HEADER: Authorization header not provided.",
              "code": "401"
            },
            {
              "reason": "PERMISSION_DENIED: The API caller does not have the permission to execute this operation.",
              "code": "403"
            },
            {
              "reason": "INVALID_MEGASIGN_ID: The Mega Sign ID specified is invalid.",
              "code": "404"
            }
          ],
          "httpMethod": "GET",
          "type": "MegasignEventList",
          "parameters": [
            {
              "paramType": "header",
              "name": "Authorization",
              "description": "An <a href=\"#\" onclick=\"this.href=oauthDoc()\" oncontextmenu=\"this.href=oauthDoc()\" target=\"oauthDoc\">OAuth Access Token</a> with scopes:<ul><li style='list-style-type: square'><a href=\"#\" onclick=\"this.href=oauthDoc('agreement_read')\" oncontextmenu=\"this.href=oauthDoc('agreement_read')\" target=\"oauthDoc\">agreement_read</a></li></ul>in the format <b>'Bearer {accessToken}'.",
              "type": "string",
              "required": true
            },
            {
              "paramType": "header",
              "name": "x-api-user",
              "description": "The userId or email of API caller using the account or group token in the format <b>userid:{userId} OR email:{email}.</b> If it is not specified, then the caller is inferred from the token.",
              "type": "string",
              "required": false
            },
            {
              "paramType": "header",
              "name": "x-on-behalf-of-user",
              "description": "The userId or email in the format <b>userid:{userId} OR email:{email}.</b> of the user that has shared his/her account",
              "type": "string",
              "required": false
            },
            {
              "paramType": "header",
              "name": "If-None-Match",
              "description": "Pass the value of the e-tag header obtained from the previous response to the same request to get a RESOURCE_NOT_MODIFIED(304) if the resource hasn't changed.",
              "type": "string",
              "required": false
            },
            {
              "paramType": "path",
              "name": "megaSignId",
              "description": "The identifier of the MegaSign parent agreement, as returned by the megaSign creation API or retrieved from the API to fetch megaSign agreements",
              "type": "string",
              "required": true
            }
          ],
          "order": 188
        }
      ]
    },
    {
      "path": "/megaSigns/{megaSignId}/formData",
      "operations": [
        {
          "summary": "Retrieves data entered by recipients into interactive form fields at the time they signed the child agreements of the specified MegaSign agreement",
          "notes": "CSV file stream containing form data information",
          "format": "byte",
          "nickname": "getMegaSignFormData",
          "produces": [
            "text/csv"
          ],
          "authorizations": {
            "oauth2": [
              {
                "scope": "agreement_read"
              }
            ]
          },
          "errorResponses": [
            {
              "reason": "RESOURCE_NOT_MODIFIED: Resource is not modified.",
              "code": "304"
            },
            {
              "reason": "INVALID_ACCESS_TOKEN: Access token provided is invalid or has expired.",
              "code": "401"
            },
            {
              "reason": "INVALID_ON_BEHALF_OF_USER: Invalid user ID or email provided in x-on-behalf-of-user header.",
              "code": "401"
            },
            {
              "reason": "INVALID_USER: Invalid user ID or email provided in x-user header.",
              "code": "401"
            },
            {
              "reason": "NO_AUTHORIZATION_HEADER: Authorization header not provided.",
              "code": "401"
            },
            {
              "reason": "API_TERMS_NOT_ACCEPTED: Your account is locked because an administrator has not agreed to Adobe Sign's Terms of Use. Please contact your account administrator to activate your account.",
              "code": "403"
            },
            {
              "reason": "PERMISSION_DENIED: The API caller does not have the permission to execute this operation.",
              "code": "403"
            },
            {
              "reason": "INVALID_MEGASIGN_ID: The Mega Sign ID specified is invalid.",
              "code": "404"
            },
            {
              "reason": "MEGASIGN_DELETED: The Mega Sign has been deleted.",
              "code": "404"
            },
            {
              "reason": "NO_FORM_DATA: There is no form data available.",
              "code": "404"
            },
            {
              "reason": "MISC_SERVER_ERROR: Some miscellaneous error has occurred.",
              "code": "500"
            }
          ],
          "httpMethod": "GET",
          "type": "string",
          "parameters": [
            {
              "paramType": "header",
              "name": "Authorization",
              "description": "An <a href=\"#\" onclick=\"this.href=oauthDoc()\" oncontextmenu=\"this.href=oauthDoc()\" target=\"oauthDoc\">OAuth Access Token</a> with scopes:<ul><li style='list-style-type: square'><a href=\"#\" onclick=\"this.href=oauthDoc('agreement_read')\" oncontextmenu=\"this.href=oauthDoc('agreement_read')\" target=\"oauthDoc\">agreement_read</a></li></ul>in the format <b>'Bearer {accessToken}'.",
              "type": "string",
              "required": true
            },
            {
              "paramType": "header",
              "name": "x-api-user",
              "description": "The userId or email of API caller using the account or group token in the format <b>userid:{userId} OR email:{email}.</b> If it is not specified, then the caller is inferred from the token.",
              "type": "string",
              "required": false
            },
            {
              "paramType": "header",
              "name": "x-on-behalf-of-user",
              "description": "The userId or email in the format <b>userid:{userId} OR email:{email}.</b> of the user that has shared his/her account",
              "type": "string",
              "required": false
            },
            {
              "paramType": "path",
              "name": "megaSignId",
              "description": "The identifier of the MegaSign parent agreement, as returned by the megaSign creation API or retrieved from the API to fetch megaSign agreements",
              "type": "string",
              "required": true
            }
          ],
          "order": 189
        }
      ]
    },
    {
      "path": "/megaSigns/{megaSignId}/state",
      "operations": [
        {
          "summary": "Updates the state of a MegaSign identified by MegaSignId in the path.",
          "notes": "This endpoint can be used by creator of the MegaSign to transition between the states of megaSign. An allowed transition would follow the following sequence :  IN_PROCESS->CANCELLED.",
          "nickname": "updateMegaSignState",
          "produces": [
            "application/json"
          ],
          "authorizations": {
            "oauth2": [
              {
                "scope": "agreement_write"
              }
            ]
          },
          "errorResponses": [
            {
              "reason": "MISSING_IF_MATCH_HEADER: If-Match header missing.",
              "code": "400"
            },
            {
              "reason": "MUST_PROVIDE_VALID_MEGASIGN_STATUS: Must provide a valid megaSign status.",
              "code": "400"
            },
            {
              "reason": "INVALID_ACCESS_TOKEN: Access token provided is invalid or has expired.",
              "code": "401"
            },
            {
              "reason": "INVALID_ON_BEHALF_OF_USER: Invalid user ID or email provided in x-on-behalf-of-user header.",
              "code": "401"
            },
            {
              "reason": "INVALID_USER: Invalid user ID or email provided in x-user header.",
              "code": "401"
            },
            {
              "reason": "NO_ACCESS_TOKEN_HEADER: Access token header not provided.",
              "code": "401"
            },
            {
              "reason": "NO_AUTHORIZATION_HEADER: Authorization header not provided.",
              "code": "401"
            },
            {
              "reason": "API_TERMS_NOT_ACCEPTED: Your account is locked because an administrator has not agreed to Adobe Sign's Terms of Use. Please contact your account administrator to activate your account.",
              "code": "403"
            },
            {
              "reason": "PERMISSION_DENIED: The API caller does not have the permission to execute this operation.",
              "code": "403"
            },
            {
              "reason": "INVALID_MEGASIGN_ID: The Mega Sign ID specified is invalid.",
              "code": "404"
            },
            {
              "reason": "MEGASIGN_DELETED: The Mega Sign has been deleted.",
              "code": "404"
            },
            {
              "reason": "MEGASIGN_ALREADY_CANCELLED: The Mega Sign being modified has already been cancelled.",
              "code": "409"
            },
            {
              "reason": "RESOURCE_MODIFIED: Resource is already modified with newer version.",
              "code": "412"
            },
            {
              "reason": "MISC_SERVER_ERROR: Some miscellaneous error has occurred.",
              "code": "500"
            }
          ],
          "httpMethod": "PUT",
          "type": "void",
          "parameters": [
            {
              "paramType": "header",
              "name": "Authorization",
              "description": "An <a href=\"#\" onclick=\"this.href=oauthDoc()\" oncontextmenu=\"this.href=oauthDoc()\" target=\"oauthDoc\">OAuth Access Token</a> with scopes:<ul><li style='list-style-type: square'><a href=\"#\" onclick=\"this.href=oauthDoc('agreement_write')\" oncontextmenu=\"this.href=oauthDoc('agreement_write')\" target=\"oauthDoc\">agreement_write</a></li></ul>in the format <b>'Bearer {accessToken}'.",
              "type": "string",
              "required": true
            },
            {
              "paramType": "header",
              "name": "x-api-user",
              "description": "The userId or email of API caller using the account or group token in the format <b>userid:{userId} OR email:{email}.</b> If it is not specified, then the caller is inferred from the token.",
              "type": "string",
              "required": false
            },
            {
              "paramType": "header",
              "name": "x-on-behalf-of-user",
              "description": "The userId or email in the format <b>userid:{userId} OR email:{email}.</b> of the user that has shared his/her account",
              "type": "string",
              "required": false
            },
            {
              "paramType": "header",
              "name": "If-Match",
              "description": "The server will only update the resource if it matches the listed ETag otherwise error RESOURCE_MODIFIED(412) is returned.",
              "type": "string",
              "required": true
            },
            {
              "paramType": "path",
              "name": "megaSignId",
              "description": "The identifier of the MegaSign parent agreement, as returned by the megaSign creation API or retrieved from the API to fetch megaSign agreements",
              "type": "string",
              "required": true
            },
            {
              "paramType": "body",
              "name": "MegaSignStateInfo",
              "description": "MegaSign state update information object.",
              "type": "MegaSignStateInfo",
              "required": true
            }
          ],
          "order": 191
        }
      ]
    }
  ],
  "resourcePath": "/megaSigns",
  "produces": [
    "application/json"
  ]
}